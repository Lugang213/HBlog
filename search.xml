<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Node.js中相关术语]]></title>
    <url>%2F2019%2F10%2F18%2Fnode-term%2F</url>
    <content type="text"><![CDATA[Node.js 术语表第 1 章 ECMAScript 标准 ECMAScript 是由 Ecma 国际标准化的脚本语言规范。ECMAScript 有几个标准，本书关注的是 ECMAScript 2015（ECMAScript 第 6 版）。为确保他们的解释器与为其他实现而写的 JavaScript 兼容，JavaScript 实现者采用了 ECMAScript 标准。 异步 不一定按照出现的顺序执行的代码。在 Node.js 中，这个术语通常用来描述那些接受回调函数为参数的 API，因为这些回调函数是在将来的某一时点运行的。比如说，作为fs.readFile 参数的那个回调函数，会在文件读取完成后收到该文件中的内容。 语义版本 使用三个数字表明版本兼容性的惯用法：主版本号、次版本号、修订号，表示为 1.0.2（主版本号为 1，次版本号为 0，修订号为 2）。一个依赖于 1.0.2 版本的项目应该能跟 1.1.1 兼容，但不能跟 2.0.2 兼容。 Promise Promise 对象是标准化的 ECMAScript 2015 API，用于表示现在、将来可获得，或永远都得不到的值。 非阻塞 I/O 阻塞的操作会让线程挂起，直到操作完成才会继续执行。Node 用的是非阻塞 I/O，即从文件或网络等资源读取数据时不会阻塞线程的执行。 npm Node 的包管理器。用来安装存放在大型中心仓库上的包，以及管理 Node 项目中的依赖项。 libuv Node 用的多平台异步 I/O 库。Julia 等语言也在用这个库。 核心模块 Node 自带的那些库。 箭头函数 简写的函数。即在将函数作为参数传给其他函数时，用 () =&gt; {} 而不是function () {} 这样的写法。如果函数只接受一个参数，那么括号可以忽略。 解构 ECMAScript 2015 引入了解构，允许将对象和数组分解为变量和常量。比如说，const { name } = { name: ‘Alex’ }的计算结果是创建一个名为 name，值为 Alex的常量。 JSON（JavaScript 对象表示法） JSON 是一种轻量的数据交换格式，基于 JavaScript 的子集，易于阅读和编写。 抽象接口 没有具体实现的 API 的程序化描述。Node.js 中的流 API 就是抽象接口。 剩余参数 ECMAScript 2015 中的剩余参数语法允许我们将一个不定数量的参数表示为一个数组。比如要命名两个参数，但其余参数都放在数组中，可以表示为 function (a, b, …rest)。还可以跟解构配合使用来复制对象：const newObject = { …oldObject }。 事件 导致某个函数被调用的字符串。该函数被称为对象监听器。发出事件的是发射器。Node 中用来创建发射器的基类是 EventEmitter。 事件轮询 Node 的事件轮询等待外部事件，并将它们转化为回调函数的调用。其他系统采用类似的机制（消息派发器和运行轮询）快速将事件路由给相应的事件处理器。 REPL（读取计算输出循环） 可以用来计算代码及查看结果的命令行界面。 第 2 章 闭包 JavaScript 函数能捕获在其封闭作用域内定义的变量。比如在函数 A 内定义一个函数 B，则 B 能访问 A 中定义的所有值。 package.json Node 项目中的文件，用来定义项目名称、作者、版权许可和依赖项。所有 Node 程序和库中都应该有这样一个文件。 模块 Node 模块是包含 JavaScript 代码的文件。可以输出值（一般是函数和常量）供其他文件使用。 栈跟踪 截止到错误发生时所执行过的程序指令。 内容管理系统（CMS） Web 程序，用来编辑文本和图片，编辑好的内容将会显示在面向公众的网站上。 流程控制（或控制流程） 语句执行的顺序。因为 Node 是异步的，所以控制流很重要。JavaScript 中有很多种处理控制流的办法，包括回调、Promise、生成器、基本循环原语，以及遍历器。在 Node 中，流控制是指将异步任务的执行顺序分组的办法。 回调函数 已经被传给另一个函数，并且可能稍后会调用的函数。 回调嵌套 回调内还有回调。在把某个回调函数作为参数传给一个函数时，某些情况下有必要在这个回调函数内再定义一个回调函数。 全局作用域 因为作用域是指值可以访问的范围，所以全局作用域的值在程序中的任何地方都可以访问。 CommonJS 模块规范 用于定义应该从当前 JavaScript 文件中输出什么的一种模块格式。 状态 程序中的所有变量在指定时间点上的值。 属性 JavaScript 对象是包含键值对的集合，这些键值对就是对象的属性。 第 3 章 表单编码 在向 Web 服务器发送 HTTP POST 请求时，会包含一个简单的表单 POST，表单中的内容会编码为请求主体。最常用的格式 application/x-www-form-urlencoded，类似于 URL 编码，会将不安全的 ASCII 字符替换为百分号。 模板 用于生成 HTML 的普通文本格式，可以包含嵌入数据和 JavaScript 代码，以便精简HTML 的语法。 MIME（多用途互联网邮件扩展） 这是一个互联网标准，用于往电子邮件和多部分消息体中添加非文本数据，以便让电子邮件客户端可以显示 HTML、图片和非 ASCII 字符集中的文本。 对象-关系映射（ORM） 对程序员友好的数据结构（比如 JavaScript 对象）和数据库的数据结构（比如表和外键）两者之间的映射是用这样的库建立的。 套路化代码 经常复制并且可以自动生成的代码。 路由 给定的路由处理器需要处理的 URL 片段和 HTTP 动词。 路由处理器 用户定义的回调函数，在有 HTTP 请求发送到 Web 程序时运行。路由处理器一般会生成内容，这些内容可能是来自数据库的，或者是对数据库进行修改，然后生成响应消息。这些响应消息可能是用模板生成的，也有可能是用 JSON 之类的格式。 客户端包 经过预处理的 JavaScript 代码，通常来自多个源文件，经过最小化和压缩后发送到客户端。 静态资源文件 无须 Web 服务器做任何额外处理就可以作为响应消息的文件。通常包括图片、CSS 文件和客户端 JavaScript 文件。 cURL 一个用来发送 HTTP 请求的命令行工具和程序库。经常用作调试工具，可以快速检查 Web 服务器对请求的响应。 数据库模型 跟使用数据库的原生语言相比，设计良好的数据模型会让程序员感觉跟数据库表或文档的交互更轻松。 REST（表述性状态转移），RESTful API 无状态 Web API 使用一组 HTTP 预先定义好的操作。这些操作是基于 HTTP 动词的，最常用的是 GET、POST、PUT 和 DELETE。 第 4 章 源码映射 一个文件，浏览器中的调试器可以据此将转译后源码文件中的代码映射到原始文件中的对应行上。 Webpack 加载器 转换或转译源码。 Webpack 插件 修改构建进程本身的行为，不一定会改变输出文件。 方法链 在上一个执行的方法的返回值上运行一个方法。 流 高效的数据输入和（或）输出通道，文本或二进制数据都可以。Node 支持可读、可写和其他流，并且这些流可以用管道连接到一起。 构建系统 一套工具和配置文件，其所生成的 JavaScript 能在浏览器中运行更高效。 管道 将一个数据输出连到另一个输入上。在 UNIX 中，进程是用竖线符（|）连成管道的；在 Node 中，流是用方法链连成管道的。 剪毛器 检查源码格式的正确性。剪毛器可以按照一组剪毛规则对项目进行检查，从而强化指定的编程风格。 测试引擎 运行并整理单元测试结果的程序，一般可以同时处理多个文件。 转译 也称为源码到源码编译，JavaScript 转译器可以将一种 ECMAScript 转换成另外一种。最常用的是将更先进的 ES2015 转换成向后兼容的 ECMAScript 5，后者能用在更多浏览器上。还有 TypeScript，它是 JavaScript 的超集，也能转译为 ES5 或 ES2015。 第 5 章 Web 框架 用来开发 Web 程序的一组函数库，可以用插件或中间件进行扩展。 模型-视图-控制器（MVC） 将软件分解为组件的设计模式。模型管理数据和逻辑，视图将数据转化成用户界面，控制器则将交互转化成对模型和视图的操作。 单页 Web 程序 一次性返回给浏览器的程序，不需要整页刷新。如果程序需要改变浏览器中的 URL，可以用 HTML5 的历史 API 让用户觉得 URL 已经变了，而浏览器已经从服务器上加载了新的页面。 同构 通过共享相同的代码而能够在客户端和服务器端运行的 JavaScript 程序。 GET 参数 出现在问号之后的 URL 参数，分隔符是 &amp; 符号。 关系型数据库 基于所存储的实体及其关系而形成的数据库结构。 HTTP 动词 HTTP 方法（GET、 POST、 PUT、PATCH、 DELETE）表示应该在远程资源上执行的动作。 解耦 如果项目中的某个函数、类或模块可以轻松替换，或者用在其他项目中，那么它就是松散耦合的。 全栈框架 如果框架中所包含的功能既可以用于客户端，也可以用于服务器端代码，则说它是全栈框架。那通常意味着这个框架中有处理 HTTP 请求、请求路由、数据库建模和与浏览器中运行的代码进行通信等功能的函数库。 中间件 能够按顺序调用来修改 HTTP 请求和响应的函数。 数据库适配器 一些通用的数据库的函数库，可以用特定的适配器进行扩展，以实现特定数据库所需的功能。 第 6 章 bcrypt 密码散列函数。由于这个函数能将任意数量的数据映射为固定大小的字符串，因此用户密码的明文经过处理后可以安全地存储在数据库中。 模板语言 轻量的标记语言，可以转换为 HTML，并能够从代码中注入值，循环遍历数组或对象。 密码盐 用来作为散列函数输入的随机数据，可以加大字典攻击的难度。 单线程 运行的程序（进程）可以有多个并发执行的线程。JavaScript 的模型是使用单线程，但在发生事件时，线程可以切换上下文运行不同的代码。浏览器中的事件是用户点击按钮之类的交互动作。在 Node 中，通常是 I/O 事件，比如网络操作或从硬盘中读取数据。 第三方中间件 不是由初始的 Web 库或框架的作者发布的中间件组件。 内容协商 HTTP 标准的一部分，用来处理相同 URI 上不同版本的文档。如果服务器支持内容协商，那么用户代理（浏览器）可以请求不同格式的数据。 响应对象 决定服务器将会如何响应某个 HTTP 请求的对象。包含响应主体（通常是一个 Web 页面）和消息头。 CSS 预处理器 将 CSS 超集转换成浏览器能够解释的 CSS。Sass 和 LESS 样式表语言都包含 CSS 预处理器，并且这些语言可以添加变量、嵌套和 mixin 等功能。 Redis 哈希 一个字符串和值的映射，用来表示 Redis 数据库中的对象。 Redis 数据库 内存数据库，可以作为缓冲区和消息代理使用。常用在 Web 程序中存储用户会话和消息推送。 第 7 章 有意义的空格 JavaScript 用大括号、分号和换行来分隔语句。如果需要一个新的词法块，则用函数或控制语句。而在某些语言中，空格是有意义的，比如 Pug 中的每行代码都会用不同数量的空格形成缩进，从而形成代码块。 mixin 通常是指一个类，这个类中定义了用在其他类中的方法。在 Sass 中，mixin 是 CSS声明的分组，可以在多处重用；在 Pug 中，mixin 用来定义可重用模板片段。 区块 lambda 因为 lambda 是匿名函数，所以 Hogan 中的区块 lambda 是将函数与模板中的标签关联起来的一种办法。 XSS（跨站脚本）攻击 如果 Web 程序接受来自表单或 URL 参数的用户输入，并且那些值会重新出现在模板中，则有可能会被注入恶意代码。为了避免遭受这种攻击，必须先将收到的值进行转义。 子模板（partial） 小型的可重用模板。 词法作用域 变量的可见性是由它的作用域决定的。在 JavaScript 中，添加一个函数会增加新的作用域层级。那个函数中定义的所有变量对该函数中定义的所有函数来说都是可见的。 第 8 章 ACID（Atomicity、Consistency、Isolation、Durability，原子性、一致性、隔离性和耐用性） 数据库要想满足 ACID，其操作必须是原子性的（操作或者成功，或者失败，但失败后数据库必须保持原样）、一致性的（数据只能以允许的方式改变）、隔离性的（确保能够并发执行）和耐用性的（变化发生后，即便经历了系统崩溃或重启，也必须保留下来）。 Web worker 允许 JavaScript 运行在浏览器后台线程上的办法。 BSON MongoDB 中表示对象的二进制格式。对象是由一组排好序的元素组成的。元素是由域名、类型、值构成的。BSON 支持的类型包括字符串、整型、日期和 JavaScript 代码。 面向文档的数据库 存储半结构化数据的数据库，这些数据没有预先定义好的模式，有时是 JSON 或 XML。比如 MongoDB 和 CouchDB。 发布/订阅 一种能够将消息发送给多个接收者的模式。 分布式数据库 存储在多台计算机上的数据库，虽然不一定，但有可能分布在不同的地理位置上。 复制集 一组 MongoDB 进程，可以让数据集保持一致。 NoSQL 不用关系型数据库中那种表格关系的数据库。 关系代数 关系型数据库的理论基础，对所存储的数据和在其上执行的查询进行建模的依据。 缓存记忆（memoize） 一种优化技术，用于将函数的结果保存起来，这样就不用再次调用它了。 主键 数据库表中用来唯一标识每一行记录的那一列。 查询构建器 为程序员提供便利，不用再手动编写 SQL 的 API。 抽象漏洞 尝试将底层实现的大量细节和问题隐藏起来，以降低复杂度。 守护进程 在后台运行的程序，通常是在系统启动时自动启动的。 数据库模式 数据库中数据及其相互关系的正式定义。它是数据库的设计。 数据库事务 按照 ACID 属性组合在一起的一个或多个数据库操作。 第 9 章 BDD（行为驱动开发） TDD 的扩展，其用不同的 API 风格来鼓励将注意力放在流程中的测试点上，测试什么，不测试什么，以及一次做多少测试。同时尽量改善测试失败提示及单元测试名称的可理解性。 模拟对象（mock） 行为像真正的对应物的值或对象，但通常要简单得多，只是为了测试模拟了刚好够用的行为。所以在测试中一般不会访问真正的文件或网络，因为速度可能会比较慢，如果进行破坏性操作的话，还会有危险，模拟物可以安全地模拟这些行为。 单元测试 在小的测试集（单元）中孤立测试模块的一小部分，比如函数或类的方法。 断言 确保表达式的计算结果符合期望。可以是一个简单的布尔语句、等式、或其他任何东西。在 Node 中，断言失败时会抛出异常。测试运行器可以捕获这些异常，并进行汇总以形成测试报告。 typeof JavaScript 操作符，其可以根据指定对象或值返回一个字符串。 功能测试 测试整个系统中的某个功能。在 Web 开发中，这意味着要同时测试浏览器和服务器端，是全栈测试。 测试运行器 管理测试加载、执行和结果收集以便显示的程序。Mocha 就是测试运行器。 测试驱动开发（TDD） 先写测试，再写要进行测试的代码。 第 10 章 Elastic Beanstalk 亚马逊提供的协调性服务，用于向它的其他服务，比如 EC2，做脚本部署。 亚马逊 EC2（亚马逊弹性计算云） 亚马逊的虚拟计算机服务。 Docker 映像 Docker 用来创建容器的文件系统的映像。 dyno Heroku 对自己的容器的叫法。用来运行服务器以及 Heroku 的服务器上独立环境中的所有命令。 内容交付网络（CDN） 交付静态内容的分布式服务器。 sudo 在需要使用其他用户权限运行程序时使用的命令。一般在需要特殊权限时使用，比如编辑系统配置文件。 SSH（安全 shell） 提供一个连接远程计算机的加密命令行（或 X11）界面。在 Web 开发人员刚开始配置新的服务器，或连接到服务器运行维护或调试命令时使用。 容器 一种虚拟技术，是为用户隔离出来的操作系统实例，运行在主操作系统之上。容器提供了额外的资源使用控制，有安全优势，并且可以快速搭建和销毁。 日志轮转 定期运行的命令，根据日期重命名日志文件，可能还会进行压缩以节省存储空间。 第 11 章 退出状态码 程序结束时返回的值。非零值说明有错误发生。 国际开放标准组织（Open Group） 发布了单一 UNIX 规范（Single UNIX Specification）的国际性非营利组织，该规范是一组标准，用来认证可以使用 UNIX 商标的操作系统厂商。 进程间通信 操作系统提供的程序间相互通信的方法。比如管道就是用一个程序的输出作为另一个程序的输入。甚至连文件都可以被当作进程间通信的一种方式。 参数 程序的参数是在命令行中提供的标志，用来指明启用或禁用某些功能。 stderr 用于运行中程序输出错误信息的流。 stdout 用于程序要显示的信息的输出流。 stdin 运行中程序的输入流。 重定向 捕获一个程序的输出并将其作为输入发送给其他程序或文件。 shell 能够输入命令和查看结果的命令行用户界面。之所以称为 shell，是因为它是包裹在操作系统外面的一层。 第 12 章 Electron 渲染进程 Chromium Web 视图。 Electron 主进程 管理 Electron app 并负责访问文件和网络的 Node 进程。 原生 用操作系统自带的 API 写成的程序或库。 JSX React 程序使用混合了 JavaScript 的 HTML 片段。在浏览器中运行前会预处理为纯粹的 JavaScript。这种语言称为 JSX。 Chromium 一个开源的浏览器，Google Chrome 浏览器的代码源自该项目。 React Facebook 为搭建数据驱动的 Web 和移动端用户界面提供的库。 网络抓取 将 HTML 转换成结构化数据以便存储在文件或数据库中。 微格式 人类和软件都能解读的在 HTML 中包含结构化数据的方式。因为 HTML 有时不能清晰地表示结构化数据，所以可以在不借助任何特殊标签的情况下用微格式在 HTML中嵌入地址、地理信息位置、日历条目等数据。 DOM（文档对象模型） 这个标准为 JavaScript 处理 HTML 定义了 API。DOM 是与语言无关的 HTML 处理接口。 构造器 创建并初始化 JavaScript 对象的函数。 XPath 用来从 XML 文档中选取节点的查询语句。 CSV（逗号分隔的值） 表格化数据的文本格式，一般用于数据库或电子表格程序。其中的值会用逗号分隔成列，用换行分行。 正则表达式 匹配字符串中的模式的表达式。 垂直搜索引擎 专注于特定范围的搜索引擎。 robots.txt 网站用来告诉网络爬虫和抓取器什么内容可以扫描或什么内容不能抓取的标准。]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Mac本中使用git以及向GitHub同步代码]]></title>
    <url>%2F2019%2F10%2F17%2Fmac-github%2F</url>
    <content type="text"><![CDATA[1. 安装git程序git客户端程序地址：https://git-scm.com/download/mac 1$ git --version ——查看是否安装成功 2. 创建SSH步骤一：在终端输入命令： 1cd ~/.ssh 如果出现 -bash: cd: /Users/glamor/.ssh: No such file or directory，说明之前没有用过，直接进入步骤二。如果之前用过需要清理原来的rss，终端输入命令： 1$ mkdir key_backup $ cp id_rsa* key_backup $ rm id_rsa* 步骤二：终端输入命令： 1$ ssh-keygen -t rsa -C XXX@XX.com (邮箱是GitHub的注册邮箱)一直回车，直到Overwrite(y/n)?,输入y,一直回车 确认完毕后，程序将生成一对密钥存放在以下文件夹：/users/用户/.ssh/密钥分成两个文件，一个私钥（id_rsa）、一个公钥（id_rsa.pub）。私钥保存在您的电脑上，公钥交项目负责人添加到服务器上。用户必须拥有与服务器公钥所配对的私钥，才能访问服务器上的代码库。 3. 向GitHub上设置自己的公钥步骤一：复制公钥执行命令： 1$ pbcopy &lt; ~/.ssh/id_rsa.pub 将公钥的内容复制到内存里。 步骤二：登录GitHub =&gt; Settings =&gt; SSH and GPG keys =&gt; new SSH keyTitle 随便写，key 粘贴刚才复制的步骤三： 测试连接是否成功在终端输入命令：ssh -T git@github.com成功之后就可以使用git管理代码了。 4. 备注使用VSCode中的git功能初次推送代码时可能需要输入一下代码： 12$ git config --global user.email &quot;user.email&quot;$ git config --global user.name &quot;user.name&quot;]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中的Promise]]></title>
    <url>%2F2019%2F10%2F15%2Fjs-promise%2F</url>
    <content type="text"></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js 链接Mysql 报错及解决方案]]></title>
    <url>%2F2019%2F10%2F15%2Fnode-mysql-error%2F</url>
    <content type="text"><![CDATA[错误信息：Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client 报错原因：mysql8.0.4开始引入一个caching_sha2_password模块作为默认身份验证插件，数据库连接时验证身份的工作方式(handshake process)会与以往不同。但以前版本的通过mysql_native_password 创建的账户仍然可以正常工作，只是验证这些账户时会切回mysql_native_password的工作方式，以此实现向下兼容。nodejs版本尚未跟进caching_sha2_password的实现，所以需要通过命令来手动切换验证账号方式 解决方法：ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘password’;]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[H5视频播放器]]></title>
    <url>%2F2018%2F10%2F18%2Fh5-video%2F</url>
    <content type="text"><![CDATA[1. video标签相关属性微信在video标签上新增了一些x5的私有属性，仅适用于Android平台 x5-video-player-type 启用H5同层播放器 1&lt;video id=&quot;test_video&quot; src=&quot;xxx&quot; x5-video-player-type=&quot;h5&quot; /&gt; x5-video-player-fullscreen 是否全屏(‘true’或’false’) 1&lt;video id=&quot;test_video&quot; src=&quot;xxx&quot; x5-video-player-type=&quot;h5&quot; x5-video-player-fullscreen=&quot;true&quot;/&gt; 需要监听窗口大小变化(resize)实现全屏 1234567window.onresize = function()&#123;test_video.style.width = window.innerWidth + &quot;px&quot;;test_video.style.height = window.innerHeight + &quot;px&quot;;&#125; x5-video-orientation 控制横竖屏可选值： ‘landscape’ 横屏, ‘portraint’竖屏,’landscape|portrait’自动旋转默认值：portraint 123&lt;video ... x5-video-player-type=”h5” x5-video-orientation=&quot;landscape&quot;/&gt; --横屏&lt;video ... x5-video-player-type=&quot;h5&quot; x5-video-orientation=&quot;portrait&quot;/&gt; --竖屏&lt;video x5-video-player-type=&quot;h5&quot; x5-video-orientation=&quot;landscape|portrait&quot;/&gt;--跟随手机自动旋转 iOS平台相关的属性： airplay x-webkit-airplay以上两个取值为’allow’或’deny’，通常保险起见用’allow’就可以 1x-webkit-airplay=&quot;allow&quot; playsinlineh5的video播放视频时，在ipad上是默认原来大小的，而在iphone上是默认全屏播放的 1playsinline=&quot;true&quot; webkit-playsinline=&quot;true&quot; /*IOS微信浏览器支持小窗内播放/ webkit-playsinline 2. 视频封面video标签里有一个与视频封面相关的属性poster，但是在使用中发现性能存在一些问题，在Android端打开视频时（加载），会有跳动的感觉，但是如果去掉，在视频加载时（preload取值’auto’，且未用预加载）则会显示空白页面。目前换用了背景图片的方式，但由于视频全屏播放时顶部会有空隙，所以额外加了个background-position: bottom;以及background-size: contain;（取值和视频保持一致），这样设置好的背景在播放视频时就不会漏边了。 3. video事件1234567video.addEventListener(&apos;timeupdate&apos;, function (e) &#123; console.log(video.currentTime) // 当前播放的进度&#125;)video.addEventListener(&apos;ended&apos;, function (e) &#123; // 播放结束时触发&#125;) 4. 视频居中视频的宽高比是固定的，而手机的屏幕宽高比则不是，所以，为了让观看到的视频的体验尽可能一致，以宽度为先，进行适配 1234567891011121314function handleResize() &#123; var sWidth = 9 var sHeight = 16 var width = window.innerWidth var height = window.innerHeight var marginTop = height - (width * sHeight) / sWidth marginTop = Math.round(marginTop) if (marginTop &lt; -2) &#123; video.$wrapper.css(&apos;marginTop&apos;, marginTop / 2 + &apos;px&apos;) &#125; else &#123; video.$wrapper.css(&apos;marginTop&apos;, &apos;0&apos;) &#125;&#125; 5. 备注1.为了让视频真正铺满全屏,可以适当让video的显示区域大于视口区域,这样在显示时在视口外的部截掉后,不会出四周黑边的情况2.iOS 10 之前的版本支持 webkit-playsinline，但是加了这个属性后，在 iOS 9 的上出现只能听到声音不能看到画面的问题，最后使用的标签代码playsinline，然后再加上这个库 iphone-inline-video一起使用。3.Android 是不支持 playsinline 属性使视频内联播放的。但是，如果你看过一些腾讯的视频类 HTML5，会发现它们在微信里是可以内联播放的，而这个功能是需要申请加入白名单的。不过新版的 TBS 内核（&gt;=036849）支持 同层播放器 ，这个不需要申请白名单，只需给 video 设置两个属性 x5-video-player-type=”h5” 和 x5-video-player-fullscreen=”true”4.通过监听这两个事件就可以知道当前的播放状态 1234567document.getElementById(&apos;video&apos;).addEventListener(&quot;x5videoexitfullscreen&quot;, function()&#123; alert(&quot;exit fullscreen&quot;)&#125;)document.getElementById(&apos;video&apos;).addEventListener(&quot;x5videoenterfullscreen&quot;, function()&#123; alert(&quot;enter fullscreen&quot;)&#125;)]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 多台电脑同步管理博客解决方案]]></title>
    <url>%2F2018%2F10%2F10%2Fhexo-multiport%2F</url>
    <content type="text"><![CDATA[Hexo的博客管理是需要源文件的，在家或者在公司不同电脑上可以发布更新博客就需要我们进行一定的处理。我在网上看了好多人的方案是通过在同一仓库建两个分支管理的，master分支存放Hexo生成的静态博客文件，新建hexo分支存放Hexo源文件。 这种方法下所有的文件是公开的，存在一定的安全问题，比如在源码文件中有我们个人设置的一些私有的Key，有些涉及安全的配置并不希望公开。 我的方案是再新建一个私有库，存放我们的Hexo源文件。恰好GitHub在19年开始支持免费创建私有库了我们的处理就更简单了。 1. 在GitHub中新建一个私有库，存放Hexo源文件。2. 本地Hexo源文件上传到私有库。注意：上传之前要删除本地主题文件夹里的.git,不删上传后主题目录是空的 1./themes/maupassant/.git/ 3. 上传12345git initgit add .git commit -m &quot;hexo&quot;git remote add origin 私有库地址git push -u origin master 4. 换电脑操作时只需要把源文件 clone 到本地就行12345git clone 地址npm install hexo ghexo shexo d 5. 同步更新后的源文件push到私有库中，下次更新再在本地拉取最新源码]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js 中常用的几种取参方式]]></title>
    <url>%2F2018%2F07%2F12%2Fnodejs-req%2F</url>
    <content type="text"><![CDATA[获取请求中的参数是每个Web后台处理的必经之路，Node.js的 Express框架 提供了四种方法来实现。 1. req.body在请求的body中保存的是提交的一对对键值数据。默认情况下，它是undefined，当你使用比如body-parser和multer这类解析body数据的中间件时，它是填充的。通常用来解析POST请求中的数据 123456789101112const express = require(&apos;express&apos;)const router = express.Router()router.post(&apos;./login&apos;,function(req,res,next) &#123; const name = req.body.name const pass = req.body.password console.log(&apos;name:&apos; + name) console.log(&apos;pass:&apos; + pass) if(name == &apos;sis&apos; &amp;&amp; pass == &apos;1&apos;) &#123; res.send(&apos;1&apos;) &#125; res.send(&apos;is over&apos;)&#125;) 2. req.query一个对象，为每一个路由中的query string参数都分配一个属性。如果没有query string，它就是一个空对象，{}此方法多适用于GET请求，解析GET里的参数 1234567891011// GET /search?q=tobi+ferretreq.query.q// =&gt; &quot;tobi ferret&quot;// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=conversereq.query.order// =&gt; &quot;desc&quot;req.query.shoe.color// =&gt; &quot;blue&quot;req.query.shoe.type// =&gt; &quot;converse&quot; 3. req.params一个对象，其包含了一系列的属性，这些属性和在路由中命名的参数名是一一对应的。例如，如果你有/user/:name路由，name属性可作为req.params.name。这个对象默认值为{}。多适用于restful风格url中的参数的解析 123// GET /user/tjreq.params.name// =&gt; &quot;tj&quot; 当你使用正则表达式来定义路由规则，捕获组的组合一般使用req.params[n]，这里的n是第几个捕获租。这个规则被施加在无名通配符匹配，比如/file/*的路由： 123// GET /file/javascripts/jquery.jsreq.params[0]// =&gt; &quot;javascripts/jquery.js&quot; req.query与req.params的区别 req.params包含路由参数（在URL的路径部分），而req.query包含URL的查询参数（在URL的？后的参数） 4. req.param()被弃用，使用req.params，req.body或者req.query三种方式替换 get接受参数使用req.query,而post接受参数使用req.body]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub中使用hexo搭建博客遇到的报错处理]]></title>
    <url>%2F2018%2F07%2F10%2Fhexo-blog-error%2F</url>
    <content type="text"><![CDATA[1. GitHub访问失去CSS样式 原因： 样式加载不出来，会报404错误，URL地址不对。 解决： 修改_config.yml文件中的url地址和根目录 1234url: https://GitHub地址/博客仓库地址/root: /博客仓库地址/permalink: :year/:month/:day/:title/permalink_defaults: 2. 自己配置域名后CSS样式不显示 原因： 404错误，发现URL下多了一层文件夹 解决： 修改_config.yml文件中的url地址和根目录 1234url: https://新绑定的域名root: /permalink: :year/:month/:day/:title/permalink_defaults:]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在GitHub中快速搭建免费简洁的个人博客]]></title>
    <url>%2F2018%2F07%2F08%2Fhexo-blog%2F</url>
    <content type="text"><![CDATA[在GitHub中搭建博客也挺简单的，网上也有很多这方面的教程，其中有做得相当精致的，仅以我个人的博客做简单介绍，并且分享我个人喜欢的简洁主题。 1. 在GitHub中新建一个存放博客的库。环境准备：安装node、npm、git bush、GitHub配置ssh，方面操作。 2. 下载安装HexoHexo 是一个快速、简洁且高效的博客框架 1$ npm install -g hexo-cli 3. 本地新建文件夹，存放博客文件进入文件夹，打开 git bush,执行下面命令： 123hexo init ## 初始化目录hexo g ## 生成hexo s ## 启动 打开localhost:4000 就可以访问简易的页面了。 4. 修改中意的主题个人喜欢的：https://github.com/tufu9441/maupassant-hexo下载： 123$ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant$ npm install hexo-renderer-pug --save$ npm install hexo-renderer-sass --save 5. 重新生成并上传到GitHub1$ hexo d -g ## 生成并上传 其他问题可查看相关文档大道至简——Hexo简洁主题推荐：https://www.haomwei.com/technology/maupassant-hexo.html]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git分支管理]]></title>
    <url>%2F2017%2F10%2F16%2Fgit-branch%2F</url>
    <content type="text"><![CDATA[分支操作允许创建另一路线，从开发主线上分离开来，然后在不影响主线的同时继续工作。 例如，我们发布了1.0版本的产品，可能需要创建一个分支，以便将2.0功能的开发与1.0版本中错误修复分开。 常用命令12345678910111213$ git branch --显示所有分支（*当前分支）$ git branch [branchname] --创建新分支$ git checkout [branchname] --切换分支$ git checkout -b [branchname] --创建一个新的分支，并立即切换到新分支$ git merge --合并分支$ git branch -d [branchname] --删除分支(-D强制删除)$ git branch -v --查看每一个分支的最后一次提交$ git branch --merged --查看哪些分支已经合并到当前分支$ git branch --no-merged --查看所有包含未合并工作的分支$ git branch -m [old_branch new_branch] --重命名分支]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令整理]]></title>
    <url>%2F2017%2F10%2F15%2Fgit-command%2F</url>
    <content type="text"><![CDATA[Git 各平台安装包下载地址为：http://git-scm.com/downloads 1. 查看git配置信息1$ git config --list 2. git查看/修改用户名和邮箱地址查看用户名和邮箱地址 12$ git config user.name$ git config user.email 修改用户名和邮箱地址 12$ git config --global user.name &quot;username&quot;$ git config --global user.email &quot;email&quot; 3. git init可以看到在你的项目中生成了 .git 这个子目录。 这就是你的 Git 仓库了，所有有关你的此项目的快照数据都存放在这里。 1$ git init 4. git clone拷贝一个 Git 仓库到本地 1git clone [url] 5. git add把文件修改添加到暂存区 12git add [filename] git add . --添加当前项目的所有文件 6. git status查看在你上次提交之后是否有修改 1git status 7. git commit把暂存区的所有内容提交到当前分支 1git commit -m &quot;说明&quot; 8. 生成 SSH Key本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息,使用以下命令生成 SSH Key: 1$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 成功的话会在 ~/ 下生成 .ssh 文件夹，进去，打开 id_rsa.pub，复制里面的 key。在 github 上，进入 Account =&gt; Settings（账户配置）=&gt; SSH and GPG keys =&gt; New SSH key(title 设置标题，可以随便填，粘贴在你电脑上生成的 key) 1ssh -T git@github.com 9. 添加远程服务器12$ git remote add [shortname] [url]$ git remote add origin [github仓库地址] --添加github仓库地址 10. 推送到远程仓库12$ git push [alias] [branch] --将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支$ git push origin master 11. 查看提交历史1234$ git log$ git log --oneline --查看历史记录的简洁版本$ git log --graph --查看历史中什么时候出现了分支、合并$ git log --reverse --oneline --逆向显示所有日志]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F09%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[“Hello, world”程序是指在计算机屏幕上输出“Hello,world”这行字符串的计算机程序，“hello, world”的中文意思是“你好，世界。”。这个例程在Brian Kernighan 和Dennis M. Ritchie合著的《The C Programme Language》使用而广泛流行。因为它的简洁，实用，并包含了一个该版本的C程序首次在1974年Brian Kernighan所撰写的《Programming in C: A Tutorial》出现 1printf(&quot;hello, world\n&quot;); 实际上将“Hello”和“World”一起使用的程序最早出现于1972年，在贝尔实验室成员Brian Kernighan撰写的内部技术文件《Introduction to the Language B》之中： 1234567main()&#123; extern a,b,c; putchar(a);putchar(b);putchar(c);putchar(&apos;!*n&apos;);&#125;a&apos;hell&apos;;b&apos;o,w&apos;;c&apos;orld&apos;; 最初的”hello, world”打印内容有个标准，即全小写，有逗号，逗号后空一格，且无感叹号。不过沿用至今，完全遵循传统标准形式的反而很少出现。 其他语言中的Hello，world！易语言 1调试输出(&quot;Hello, world!&quot;) GBasic 1print(&quot;Hello, world!&quot;) VB 12345Module MainFrm Sub Main() System.Console.WriteLine(&quot;Hello, World!&quot;) End SubEnd Module C 123456#include &lt;stdio.h&gt;int main()&#123; printf(&quot;Hello, World!&quot;); return 0;&#125; Swift 1print(&quot;Hello, World!&quot;) Go 1234package mainfunc main() &#123; println(&quot;Hello, World!&quot;)&#125; BATCH 123@echo offecho Hello, World!pause Java 12345public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println( &quot;Hello, World!&quot; ); &#125;&#125; C++ 1234567#include &lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;&quot;Hello, World!&quot;&lt;&lt;flush; return 0;&#125; C# 12345678910namespace HelloWorld&#123; class Program &#123; static void Main(string[] args) &#123; System.Console.Write(&quot;Hello, World!&quot;); &#125; &#125;&#125; PHP 1echo &quot;Hello, World!&quot;; ASP 1response.write (&quot;Hello, World!&quot;) JavaScript 1console.log(&quot;Hello, World!&quot;) Python 2 1print &quot;Hello, World!&quot; Python 3 1print(&quot;Hello, World!&quot;) LaTeX 123456\documentclass&#123;article&#125; \begin&#123;document&#125; Hello, World! \end&#123;document&#125; Mathematica方法一：基于Wolfram 底层语言（进入表达式界面使用） [1] 1Cell[&quot;Hello, World!&quot;] 方法二：直接使用数学输出函数 1CellPrint[Cell[&quot;Hello, World!&quot;]] Ruby 123def hello() return &quot;Hello , World&quot; end Free pascal 1writeln(&apos;Hello, world!&apos;); Kotlin 123fun main(args: Array&lt;String&gt;) &#123; println(&quot;Hello, world!&quot;)&#125; MATLAB 1disp(&apos;Hello, world!&apos;) R 12print(&apos;hello word!&apos;)[1] &quot;hello word!&quot;]]></content>
      <categories>
        <category>程序语言</category>
      </categories>
      <tags>
        <tag>程序趣事</tag>
      </tags>
  </entry>
</search>
